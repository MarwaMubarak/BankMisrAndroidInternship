Task1
fun main(){
    val s="3+2"
    val num1=s[0].digitToInt()
    val num2=s[2].digitToInt()
    val c=s[1]
    if(c=='+')
        println("$num1 $c $num2 = ${num1+num2}")
    else if(c=='-')
        println("$num1 $c $num2 = ${num1-num2}")
    else if(c=='/')
        println("$num1 $c $num2 = ${num1/num2}")
    else if(c=='*')
        println("$num1 $c $num2 = ${num1*num2}")





}
-------------------------------------------------------------
Task2&3
-------------------------------------------------------------
import java.util.Stack

fun main() {
    //val s ="1+4/2*2"
    val s="(1+2)"
    println("$s = ${calculate(s)}")

}
fun order(x:Char):Int {
    if(x=='*')
        return 2
    else if(x=='/')
        return 2
    else if( x=='+')
        return 1
    else if(x=='-')
        return 1
    else
        return 0
}
fun isOperator(x:Char):Boolean {
    if(x=='*')
        return true
    else if(x=='/')
        return true
    else if( x=='+')
        return true
    else if(x=='-')
        return true
    else
        return false
}

fun isNum(x:Char):Boolean{
    return x in '0'..'9'
}
fun calc(num1:Double,op:Char,num2:Double):Double {
    if(op=='+')
        return num1+num2
    else if(op=='-')
        return num1-num2
    else if(op=='*')
        return num1*num2
    else if(op=='/'&& num2 != 0.0)
        return num1/num2
    else return -0.0


}
fun calculate (exp:String):Double{
    val operators= Stack<Char>()
    val values= Stack<Double>()

    var i=0
    val n=exp.length
    while (i<n){
         if(exp[i]=='('){
            operators.push(exp[i])
        }else if(isNum(exp[i])){
              var num = 0.0
             while(i < n && isNum(exp[i]))
             {
                 num = (num*10) + (exp[i]-'0')
                 i++
             }

             values.push(num)
             i--
         }else if(exp[i] == ')') {
             while(!operators.empty() && operators.peek() != '(')
             {
                 val num2=values.peek()
                 values.pop()
                 val num1=values.peek()
                 values.pop()


                 val op = operators.peek()
                 operators.pop()

                 values.push(calc(num1,op,num2))
             }
             if(!operators.empty())
                 operators.pop()
         }

        else if(isOperator(exp[i]))
        {
            while(!operators.empty() && order(operators.peek()) >= order(exp[i])){
                val num2 = values.peek()
                values.pop()

                val num1 = values.peek()
                values.pop()

                val op = operators.peek()
                operators.pop()

                values.push(calc(num1,op,num2))
            }

            operators.push(exp[i])
        }
        i++
    }
    while(!operators.empty()){
        val num2 = values.peek()
        values.pop()

        val num1 = values.peek()
        values.pop()

        val op = operators.peek()
        operators.pop()

        values.push(calc(num1,op,num2))
    }
    return values.peek()

}


